// Задача1
// Ви повинні реалізувати функцію, яка повертає різницю між
// найбільшим та найменшим значенням у списку , отриманому як аргумент
// функції. Масив, який отримує функція як аргумент, може містити позитивні
// та негативні числа. Якщо масив порожній або має 1 значення, поверніть нуль.
// Спочатку масив буде поданий у невідсортованому вигляді.
// arr([1, 2, 3, -4]); // вернет 7, потому что: 3 - (-4) == 7
// arr([16]) => 0

const arr = [100, 50, -5, 2];
//дан массив чисел

function diffMaxMin(arr) {

    //делаем проверку на длинну массива, если меньше 2 - выводим нуль, иначе
    if (arr.length < 2) {
        return 0;

        //создаем переменные для максимального и минимального значений, и с помощью метода для поиска мах/мин чисел,
        //а также оператора расширения, находим эти числа в массиве, и помещаем их в переменные
    } else {
        const maxVal = Math.max(...arr);
        const minVal = Math.min(...arr);

        //выводим разницу
        return maxVal - minVal;
    }
}

// console.log(diffMaxMin(arr));





// Задача2
// Напишіть функцію, яка приймає рядок і число. Поверніть у вигляді
// масиву тільки ті слова, довжина яких перевищує число.


//создаем функцию с двумя параметрами(строка, длинна)
function filterWordsByLength(str, length) {

    //заполняем массив слов элементами, преобразованными из строки, с помощью метода сплит 
    let words = str.split(" ");

    //заполняем массив словами, длинна которых, превышает заданную, с помощью метода фильтер  
    let longWords = words.filter(word => word.length > length);

    //выводим полученный массив    
    return longWords;
}
//   console.log(filterWordsByLength("ronaldo messi neymar mbappe pele maradona figo pepe zidane", 5));





//   Задача3
// Напишіть функцію, яка повертає true, якщо перший переданий
// аргумент (рядок) закінчується другим аргументом (також рядком).
// Приклад:
// solution('abc', 'bc') => true
// solution('abc', 'd') => false


//создаем функцию с параметрами (строка, конец)
function solution(str, ending) {

    //с помощью метода endsWith определяем сходство параметра "конец", с окончанием строки, и выводим результат 
    return str.endsWith(ending);
}

//   console.log(solution("Mbappe", "ppe"));


// Задача4
// Напишіть функцію, яка отримує масив цілих чисел і повертає масив
// середніх значень кожного цілого числа та його послідовника, якщо він є.
// Приклад:
// averages([2, -2, 2, -2, 2]), [0, 0, 0, 0]
// averages([1, 3, 5, 1, -10]), [2, 4, 3, -4.5]


//создаем функцию с параметром массив
function averages(arr) {

    //создаем в ней пустой массив
    const result = [];

    //с помощью цикла перебираем элементы массива
    for (let i = 0; i < arr.length - 1; i++) {

        // находим среднее значение, складывая элемент массива со следующим разделив на 2
        let avg = (arr[i] + arr[i + 1]) / 2;

        //заполняем пустой массив средними значениями, с помощью метода push()
        result.push(avg);
    }

    //віводим результат
    return result;
}

// console.log(averages([2, -2, 2, -2, 2]));





// Задача5
// Створіть функцію, яка приймає рядок і повертає кількість (кількість)
// голосних, які у ній.
// Приклад:
// countVowels("Celebration") ➞ 5
// countVowels("Palm") ➞ 1

// функція для підрахунку кількості голосних літер у рядку


//создаем функцию с параметром строка
function countVowels(str) {

    //создаем массив со всеми гласными буквами
    const vowels = ["a", "e", "i", "o", "u", "y"];

    //создаем перемнную=счетчик
    let count = 0;

    //с помощью цикла перебираем каждый элемент строки
    for (let i = 0; i < str.length; i++) {


        //при помощи метода includes(), проверяем наличие гласных букв в массиве, при их наличии - увеличиваем значение счетчика на единицу 
        if (vowels.includes(str[i].toLowerCase())) {
            count++;
        }
    }

    //выводим количество гласных букв
    return count;
}

//   console.log(countVowels("CELEBRATION"));
//   console.log(countVowels("Palm"));



// Створіть функцію, яка видаляє літери "a", "b" і "c" з цього рядка і поверне
// змінену версію. Якщо цей рядок не містить "a", "b" або "c", повернути null.
// Приклад:
// removeABC("This might be a bit hard") ➞ "This might e it hrd"
// removeABC("hello world!") ➞ null


//создаем функцию с параметром строка
function removeABC(str) {

    //создаем пустую строку
    //создаем булевую переменную-индикатор, со значением ложь
    let newStr = '';
    let hasABC = false;

    //с помощью цикла перебираем каждый элемент строки
    for (let i = 0; i < str.length; i++) {

        //проверяем является ли элемент строки определенной буквой, если нет - добавляем его в созданную раннее пустую строку,
        // если да, тогда не добавляем, а меняем индикатор на : истина 
        if (str[i] !== 'a' && str[i] !== 'b' && str[i] !== 'c') {
            newStr += str[i];
        } else {
            hasABC = true;
        }
    }

    //если значение индикатора - истина, тогда выводим заполненную нами строку, если ложь - возвращаем null
    return hasABC ? newStr : null;
}

// console.log(removeABC("This might be a bit hard"));
// console.log(removeABC("hello world"));




// Задача 6
// Напишіть JavaScript для пошуку унікальних елементів з двох масивів.
// Приклад:
// console.log(difference([1, 2, 3], [100, 2, 1, 10]));
// ["1", "2", "3", "10", "100"]



//создаем функцию с параметрами два массива
function uniqueness(arr1, arr2) {

    //создаем пустой массив
    const result = [];

    //с ппомощью цикла проходимся по первому массиву 
    for (let i = 0; i < arr1.length; i++) {

        //если в созданном нами массиве нет таких же элементов, как в первом, тогда заполняем наш массив этими элементами из первого массива
        if (!result.includes(arr1[i])) {
            result.push(arr1[i]);
        }
    }
    //точно также проходимся и по второму массиву
    for (let j = 0; j < arr2.length; j++) {
        if (!result.includes(arr2[j])) {
            result.push(arr2[j]);
        }
    }

    //выводим наш массив


    return result
}

console.log(uniqueness([1, 2, 3, 3, 4, 5, 5, 6, 7, 12], [100, 2, 3, 44, 10, 12, 13, 1, 10]));

